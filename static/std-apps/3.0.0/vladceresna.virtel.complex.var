
[/buttonClick.steps]

run flow "/compile.steps" flowName;

[/closeBracket.steps]


str split "/" currentFile currentFilePathTokens;
lst len currentFilePathTokens currentFilePathTokensLen;
mat minus currentFilePathTokensLen "1.0" currentFilePathTokensLastIndex;
lst get currentFilePathTokens currentFilePathTokensLastIndex currentFilePathTokensLast;

str split "\\." currentFilePathTokensLast fileNameSectorsList;
lst get fileNameSectorsList "0" fileNameWithoutFormat;
str add fileNameWithoutFormat numberBlock temp;
str add temp ".steps" temp;
str add "/" temp blockFileName;
str add codePath blockFileName blockFilePath;

fls write blockFilePath blockContent;

str add "\"" blockFileName temp;
str add temp "\"" codeForFilePath;

mat plus numberBlock "1.0" numberBlock;

lst len prstack stackLen;
mat minus stackLen "1" lastStackIndex;
lst get prstack lastStackIndex lastStackBlock;
lst remove prstack lastStackIndex;

var set lastStackBlock blockContent;

str add blockContent codeForFilePath blockContent;

scr set "progressView" "title" "Compiling..";

[/compile.steps]

scr set "progressView" "title" "Compiling...";

scr get "inputView" "value" sourcePath;
str split "/" sourcePath pathTokens;
lst len pathTokens tokensLen;
mat minus tokensLen "1" lastIndex;
lst get pathTokens lastIndex appName;

str add "$/programs/" appName appPath;
str add appPath "/code" codePath;
str add codePath "/start.steps" startPath;

fls write startPath "run one \"/start.cmplx.steps\";";

str add sourcePath "/code/" sourcesPath;
fls list sourcesPath sourcesList;

var set "0" fileIndex;
lst len sourcesList filesCount;
mat less fileIndex filesCount hasFiles;
run while hasFiles "/processFile.steps";

scr set "progressView" "title" "Compiled!";

[/openBracket.steps]

lst len prstack prstackLen;
lst set prstack prstackLen blockContent;

var set "" blockContent;
scr set "progressView" "title" "Compiling...";

[/processChar.steps]

str get charIndex content currentChar;

str eqs currentChar "{" isOpenBracket;
run if isOpenBracket "/openBracket.steps";

str eqs currentChar "}" isCloseBracket;
run if isCloseBracket "/closeBracket.steps";

bln not isOpenBracket notOpen;
bln not isCloseBracket notClose;
bln and notOpen notClose isRegular;
run if isRegular "/regularChar.steps";

mat plus charIndex "1" charIndex;
mat less charIndex contentLen hasChars;

[/processFile.steps]

scr set "progressView" "title" "Compiling....";

lst get sourcesList fileIndex currentFile;
fls read currentFile content;

lst new prstack;

var set "0.0" numberBlock;

var set "" blockContent;
var set "0" charIndex;

str len content contentLen;
mat less charIndex contentLen hasChars;
run while hasChars "/processChar.steps";

scr set "progressView" "title" "Compiling.";


str split "/" currentFile currentFilePathTokens;
lst len currentFilePathTokens currentFilePathTokensLen;
mat minus currentFilePathTokensLen "1.0" currentFilePathTokensLastIndex;
lst get currentFilePathTokens currentFilePathTokensLastIndex currentFilePathTokensLast;

str split "\\." currentFilePathTokensLast fileNameSectorsList;
lst get fileNameSectorsList "0" fileNameWithoutFormat;
str add fileNameWithoutFormat ".steps" temp;
str add "/" temp blockFileName;
str add codePath blockFileName blockFilePath;

fls write blockFilePath blockContent;




mat plus fileIndex "1" fileIndex;
mat less fileIndex filesCount hasFiles;

[/regularChar.steps]

str add blockContent currentChar blockContent;

scr set "progressView" "title" "Compiling.....";

[/start.steps]

csl write "Complex Compiler";


scr new "inputView" "input" "0" "max/min" "root";
scr set "inputView" "title" "Path to Complex sources";

scr new "buttonView" "button" "0" "max/min" "root";
scr set "buttonView" "onClick" "/buttonClick.steps";
scr new "textOnButton" "text" "0" "max/min" "buttonView";
scr set "textOnButton" "title" "Compile";

scr new "progressView" "text" "0" "max/min" "root";
scr set "progressView" "title" "Ready to compile";


scr new "textView" "text" "0" "max/min" "root";
scr set "textView" "title" "
Complex file should be located as: $/files/your/path/author.app.id/code/start.cmplx
In text field should be written as: $/files/your/path/author.app.id

Example of Complex code:
run if \"true\" {
    tts say \"Hello!\";
};
This will compiled as:
/start.steps
run if \"true\" \"/if.steps\";
/if.steps
tts say \"Hello!\";
";


[end]